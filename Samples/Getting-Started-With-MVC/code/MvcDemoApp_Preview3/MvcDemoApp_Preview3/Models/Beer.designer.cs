#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1434
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MvcDemoApp_Preview3.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="BarleyAndHops")]
	public partial class BeerDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertBeerType(BeerType instance);
    partial void UpdateBeerType(BeerType instance);
    partial void DeleteBeerType(BeerType instance);
    partial void InsertBrewery(Brewery instance);
    partial void UpdateBrewery(Brewery instance);
    partial void DeleteBrewery(Brewery instance);
    partial void InsertBeer(Beer instance);
    partial void UpdateBeer(Beer instance);
    partial void DeleteBeer(Beer instance);
    #endregion
		
		public BeerDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["BarleyAndHopsConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BeerDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BeerDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BeerDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BeerDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<BeerType> BeerTypes
		{
			get
			{
				return this.GetTable<BeerType>();
			}
		}
		
		public System.Data.Linq.Table<Brewery> Breweries
		{
			get
			{
				return this.GetTable<Brewery>();
			}
		}
		
		public System.Data.Linq.Table<Beer> Beers
		{
			get
			{
				return this.GetTable<Beer>();
			}
		}
	}
	
	[Table(Name="dbo.BeerType")]
	public partial class BeerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Beer> _Beers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public BeerType()
		{
			this._Beers = new EntitySet<Beer>(new Action<Beer>(this.attach_Beers), new Action<Beer>(this.detach_Beers));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(200)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="BeerType_Beer", Storage="_Beers", OtherKey="Type_id")]
		public EntitySet<Beer> Beers
		{
			get
			{
				return this._Beers;
			}
			set
			{
				this._Beers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beers(Beer entity)
		{
			this.SendPropertyChanging();
			entity.BeerType = this;
		}
		
		private void detach_Beers(Beer entity)
		{
			this.SendPropertyChanging();
			entity.BeerType = null;
		}
	}
	
	[Table(Name="dbo.Brewery")]
	public partial class Brewery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Location;
		
		private string _Country;
		
		private string _Established;
		
		private EntitySet<Beer> _Beers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnEstablishedChanging(string value);
    partial void OnEstablishedChanged();
    #endregion
		
		public Brewery()
		{
			this._Beers = new EntitySet<Beer>(new Action<Beer>(this.attach_Beers), new Action<Beer>(this.detach_Beers));
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Location", DbType="NVarChar(100)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[Column(Storage="_Country", DbType="NVarChar(100)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[Column(Storage="_Established", DbType="NChar(4)")]
		public string Established
		{
			get
			{
				return this._Established;
			}
			set
			{
				if ((this._Established != value))
				{
					this.OnEstablishedChanging(value);
					this.SendPropertyChanging();
					this._Established = value;
					this.SendPropertyChanged("Established");
					this.OnEstablishedChanged();
				}
			}
		}
		
		[Association(Name="Brewery_Beer", Storage="_Beers", OtherKey="Brewery_id")]
		public EntitySet<Beer> Beers
		{
			get
			{
				return this._Beers;
			}
			set
			{
				this._Beers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Beers(Beer entity)
		{
			this.SendPropertyChanging();
			entity.Brewery = this;
		}
		
		private void detach_Beers(Beer entity)
		{
			this.SendPropertyChanging();
			entity.Brewery = null;
		}
	}
	
	[Table(Name="dbo.Beer")]
	public partial class Beer : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private System.Nullable<int> _Type_id;
		
		private System.Nullable<int> _Brewery_id;
		
		private string _Description;
		
		private EntityRef<Brewery> _Brewery;
		
		private EntityRef<BeerType> _BeerType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnType_idChanging(System.Nullable<int> value);
    partial void OnType_idChanged();
    partial void OnBrewery_idChanging(System.Nullable<int> value);
    partial void OnBrewery_idChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Beer()
		{
			this._Brewery = default(EntityRef<Brewery>);
			this._BeerType = default(EntityRef<BeerType>);
			OnCreated();
		}
		
		[Column(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Type_id", DbType="Int")]
		public System.Nullable<int> Type_id
		{
			get
			{
				return this._Type_id;
			}
			set
			{
				if ((this._Type_id != value))
				{
					if (this._BeerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnType_idChanging(value);
					this.SendPropertyChanging();
					this._Type_id = value;
					this.SendPropertyChanged("Type_id");
					this.OnType_idChanged();
				}
			}
		}
		
		[Column(Storage="_Brewery_id", DbType="Int")]
		public System.Nullable<int> Brewery_id
		{
			get
			{
				return this._Brewery_id;
			}
			set
			{
				if ((this._Brewery_id != value))
				{
					if (this._Brewery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnBrewery_idChanging(value);
					this.SendPropertyChanging();
					this._Brewery_id = value;
					this.SendPropertyChanged("Brewery_id");
					this.OnBrewery_idChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="Text", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Association(Name="Brewery_Beer", Storage="_Brewery", ThisKey="Brewery_id", IsForeignKey=true)]
		public Brewery Brewery
		{
			get
			{
				return this._Brewery.Entity;
			}
			set
			{
				Brewery previousValue = this._Brewery.Entity;
				if (((previousValue != value) 
							|| (this._Brewery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Brewery.Entity = null;
						previousValue.Beers.Remove(this);
					}
					this._Brewery.Entity = value;
					if ((value != null))
					{
						value.Beers.Add(this);
						this._Brewery_id = value.id;
					}
					else
					{
						this._Brewery_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Brewery");
				}
			}
		}
		
		[Association(Name="BeerType_Beer", Storage="_BeerType", ThisKey="Type_id", IsForeignKey=true)]
		public BeerType BeerType
		{
			get
			{
				return this._BeerType.Entity;
			}
			set
			{
				BeerType previousValue = this._BeerType.Entity;
				if (((previousValue != value) 
							|| (this._BeerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._BeerType.Entity = null;
						previousValue.Beers.Remove(this);
					}
					this._BeerType.Entity = value;
					if ((value != null))
					{
						value.Beers.Add(this);
						this._Type_id = value.id;
					}
					else
					{
						this._Type_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("BeerType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
